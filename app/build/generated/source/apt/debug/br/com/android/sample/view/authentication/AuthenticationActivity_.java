//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.1.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package br.com.android.sample.view.authentication;

import java.sql.SQLException;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import br.com.android.sample.R;
import br.com.android.sample.domain.User;
import br.com.android.sample.infrastructure.repository.RepositoryHelper;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.builder.PostActivityStarter;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class AuthenticationActivity_
    extends AuthenticationActivity
    implements HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private RepositoryHelper repositoryHelper_;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(R.layout.authentication_activity);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.inputMethodManager = ((InputMethodManager) this.getSystemService(Context.INPUT_METHOD_SERVICE));
        repositoryHelper_ = OpenHelperManager.getHelper(this, RepositoryHelper.class);
        try {
            this.userRepository = repositoryHelper_.getDao(User.class);
        } catch (final SQLException e) {
            Log.e("AuthenticationActivity_", "Could not create DAO userRepository", e);
        }
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static AuthenticationActivity_.IntentBuilder_ intent(Context context) {
        return new AuthenticationActivity_.IntentBuilder_(context);
    }

    public static AuthenticationActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new AuthenticationActivity_.IntentBuilder_(fragment);
    }

    public static AuthenticationActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new AuthenticationActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.inputEmail = ((EditText) hasViews.findViewById(R.id.inputEmail));
        this.inputPassword = ((EditText) hasViews.findViewById(R.id.inputPassword));
        this.buttonBegin = ((Button) hasViews.findViewById(R.id.begin));
        if (this.buttonBegin!= null) {
            this.buttonBegin.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    AuthenticationActivity_.this.onBeginClick();
                }
            }
            );
        }
        onAfterViews();
    }

    @Override
    public void onBeginClick() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                AuthenticationActivity_.super.onBeginClick();
            }
        }
        , 0L);
    }

    @Override
    public void authenticate() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AuthenticationActivity_.super.authenticate();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void onDestroy() {
        OpenHelperManager.releaseHelper();
        repositoryHelper_ = null;
        super.onDestroy();
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<AuthenticationActivity_.IntentBuilder_>
    {
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, AuthenticationActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), AuthenticationActivity_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            super(fragment.getActivity(), AuthenticationActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public PostActivityStarter startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent, requestCode, lastOptions);
                } else {
                    if (context instanceof Activity) {
                        Activity activity = ((Activity) context);
                        ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                    } else {
                        context.startActivity(intent, lastOptions);
                    }
                }
            }
            return new PostActivityStarter(context);
        }
    }
}
